# -*- coding: utf-8 -*-
"""MAGIC-Gamma-Telescope

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AjzLCFxLkFx6dmaSlKumAEcM8bzBnib9

# MAGIC Gamma Telescope
Data are MC generated to simulate registration of high energy gamma particles in an atmospheric Cherenkov telescope

## Source
Bock, R. (2004). MAGIC Gamma Telescope [Dataset]. UCI Machine Learning Repository. https://doi.org/10.24432/C52C8B.
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from imblearn.over_sampling import RandomOverSampler

cols = ['fLength', 'fWidth', 'fSize', 'fConc', 'fConc1', 'fAsym', 'fM3Long', 'fM3Trans', 'fAlpha', 'fDist', 'class']
df = pd.read_csv('magic04.data', names = cols)
df.head()

df['class'].unique()

df['class'] = (df['class'] == 'g').astype(int)

df.head()

df['class'].unique()

for label in df.columns[:-1]:
  plt.hist(df[df['class'] == 1][label], label = 'gamma', alpha= 0.7, density=True )
  plt.hist(df[df['class'] == 0][label], label = 'hadron', alpha= 0.7, density=True )
  plt.legend()
  plt.xlabel(label)
  plt.ylabel('Probability')
  plt.show()

"""# Train, Validation, Test Datasets"""

train, valid, test = np.split(df.sample(frac=1), [int(0.6*len(df)) , int(0.8* len(df))])

def scale_dataset(dataframe, over_sampling = False):
  X = dataframe[dataframe.columns[:-1]].values
  y = dataframe[dataframe.columns[-1]].values

  X = StandardScaler().fit_transform(X)

  if over_sampling:
    X, y = RandomOverSampler().fit_resample(X, y)

  data = np.hstack((X, np.reshape(y, (-1,1))))

  return data, X, y

train, X_train, y_train = scale_dataset(train, over_sampling=True)
valid, X_valid, y_valid = scale_dataset(valid, over_sampling=False)
test, X_test, y_test = scale_dataset(test, over_sampling=False)

"""# kNN"""

from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import classification_report

knn_model = KNeighborsClassifier(n_neighbors= 3)
knn_model.fit(X_train, y_train)

y_pred = knn_model.predict(X_test)

y_pred

print(classification_report(y_test,y_pred))

"""# Naive Bayes"""

from sklearn.naive_bayes import GaussianNB

NB_model = GaussianNB()
NB_model.fit(X_train,y_train)

y_pred = NB_model.predict(X_test)

y_pred

print(classification_report(y_test,y_pred))

"""# Logistic Regression"""

from sklearn.linear_model import LogisticRegression

LR_model = LogisticRegression()
LR_model.fit(X_train,y_train)

y_pred = LR_model.predict(X_test)

print(classification_report(y_test,y_pred))

"""# Support Vector Machine"""

from sklearn.svm import SVC

SVM_model = SVC()
SVM_model.fit(X_train,y_train)

y_pred = SVM_model.predict(X_test)

y_pred

print(classification_report(y_test, y_pred))

"""# Neural Network"""

import tensorflow as tf

def plot_loss(history):
  plt.plot(history.history['loss'], label='loss')
  plt.plot(history.history['val_loss'], label='val_loss')
  plt.xlabel('Epoch')
  plt.ylabel('Binary crossentropy')
  plt.legend()
  plt.grid(True)
  plt.show()

def plot_accuracy(history):
  plt.plot(history.history['accuracy'], label='accuracy')
  plt.plot(history.history['val_accuracy'], label='val_accuracy')
  plt.xlabel('Epoch')
  plt.ylabel('Accuracy')
  plt.legend()
  plt.grid(True)
  plt.show()

def train(X_train, y_train, num_nodes, dropout_prob, learning_rate, batch_size, epochs):
  NN_model = tf.keras.Sequential([
    tf.keras.layers.Dense(num_nodes,activation='relu',input_shape=(10,)),
    tf.keras.layers.Dropout(dropout_prob),
    tf.keras.layers.Dense(num_nodes,activation='relu'),
    tf.keras.layers.Dropout(dropout_prob),
    tf.keras.layers.Dense(1,activation='sigmoid')
  ])

  NN_model.compile(optimizer = tf.keras.optimizers.Adam(learning_rate), loss='binary_crossentropy', metrics=['accuracy'])
  history = NN_model.fit(X_train, y_train, epochs=epochs, batch_size= batch_size, validation_split=0.2, verbose= 0)
  return history, NN_model

least_val_loss = float('inf')
least_loss_model = None
epochs=20
for num_nodes in [16, 32, 64]:
  for dropout_prob in[0, 0.2]:
    for lr in [0.01, 0.005, 0.001]:
      for batch_size in [32, 64, 128]:
        print(f"{num_nodes} nodes, dropout {dropout_prob}, lr {lr}, batch size {batch_size}")
        history, model = train(X_train, y_train, num_nodes, dropout_prob, lr, batch_size, epochs)
        plot_loss(history)
        plot_accuracy(history)
        val_loss = model.evaluate(X_valid, y_valid)[0]
        if val_loss < least_val_loss:
          least_val_loss = val_loss
          least_loss_model = model

y_pred = least_loss_model.predict(X_test)
y_pred = (y_pred > 0.5).astype(int).reshape(-1,)

print(classification_report(y_test,y_pred))