# -*- coding: utf-8 -*-
"""Seeds-Wheat-Types.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tzoVj7tbiN2wcf_tUknZ7oUlNzDdZ58r

# Seeds / Wheat Types
This dataset contains measurements of geometrical properties of kernels belonging to three different varieties of wheat. A soft X-ray technique and GRAINS package were used to construct all seven, real-valued attributes.

## Source
Charytanowicz, M., Niewczas, J., Kulczycki, P., Kowalski, P., & Lukasik, S. (2010). Seeds [Dataset]. UCI Machine Learning Repository. https://doi.org/10.24432/C5H30K.
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from imblearn.over_sampling import RandomOverSampler
from sklearn.preprocessing import StandardScaler

cols=['area','perimeter','compactness','length','width','asymmetry','groove','class']
df = pd.read_csv('seeds_dataset.txt', sep='\s+',names = cols)
df.head()

# for i in range(len(cols) - 1):
#   for j in range(i+1 , len(cols) -1):
#     plt.scatter(df[df.columns[j]],df[df.columns[i]])
#     plt.xlabel(df.columns[j])
#     plt.ylabel(df.columns[i])
#     plt.show()

for i in range(len(cols) -1):
  for j in range(i+1, len(cols) -1):
    xlabel= cols[j]
    ylabel= cols[i]
    sns.scatterplot(x=xlabel, y=ylabel, data=df, hue='class')
    plt.show()

"""# K Means Clustering"""

from sklearn.cluster import KMeans

kmeans_model = KMeans(n_clusters= 3)
x1 = 'asymmetry'
x0 = 'perimeter'
kmeans_model.fit(df[[x0,x1]].values)

clusters = kmeans_model.labels_

kmeans_cols = [x0,x1,'class']
data = np.hstack((df[[x0,x1]].values,clusters.reshape(-1,1)))
kmeans_df = pd.DataFrame(data,columns=kmeans_cols)
sns.scatterplot(x=x0,y=x1,data=kmeans_df,hue='class')
plt.plot()

"""# Higher Dimensions"""

kmeans_model.fit(df[df.columns[:-1]].values)

clusters = kmeans_model.labels_

kmeans_cols = list(df.columns[:-1]) + ['class']
data = np.hstack((df[df.columns[:-1]].values,clusters.reshape(-1,1)))
kmeans_df = pd.DataFrame(data,columns = kmeans_cols)
for i in range(len(df.columns) - 1):
  for j in range(i+1 , len(df.columns) - 1):
    xlabel= kmeans_df.columns[i]
    ylabel= kmeans_df.columns[j]
    sns.scatterplot(data=kmeans_df[[xlabel,ylabel,'class']],y=ylabel,x=xlabel, hue ='class')
    plt.show()



"""# PCA"""

from sklearn.decomposition import PCA

pca_model = PCA(n_components=2)
transformed_df= pca_model.fit_transform(df[df.columns[:-1]].values)

sns.scatterplot(transformed_df)
plt.show()

kmeans_pca_df = pd.DataFrame(np.hstack((transformed_df, kmeans_model.labels_.reshape(-1, 1))), columns=['pca1', 'pca2', 'class'])
truth_pca_df = pd.DataFrame(np.hstack((transformed_df, df['class'].values.reshape(-1, 1))), columns=['pca1', 'pca2', 'class'])

sns.scatterplot(x="pca1", y="pca2", hue='class', data=kmeans_pca_df)
plt.show()

sns.scatterplot(x="pca1", y="pca2", hue='class', data=truth_pca_df)
plt.plot()

